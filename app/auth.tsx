import { View, Text, TextInput, Button, TouchableOpacity, ScrollView } from 'react-native';
import { router } from 'expo-router';
import { useState, useEffect } from 'react';
import React from 'react';
import axios from 'axios';
import { useAuthStyles } from '@/styles/auth';
import { useAuthStore } from '@/store/authStore';

export default function AuthScreen() {
    const { setAuthData, loadAuthData, skipAuth: skipAuthStore } = useAuthStore();
    const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');
    const styles = useAuthStyles();
    const [loginEmail, setLoginEmail] = useState('');
    const [loginPassword, setLoginPassword] = useState('');
    const [registerEmail, setRegisterEmail] = useState('');
    const [registerPassword, setRegisterPassword] = useState('');
    const [registerPasswordConfirm, setRegisterPasswordConfirm] = useState('');
    const [showLoginPassword, setShowLoginPassword] = useState(false);
    const [showRegisterPassword, setShowRegisterPassword] = useState(false);
    const [showRegisterPasswordConfirm, setShowRegisterPasswordConfirm] = useState(false);
    const [errors, setErrors] = useState<{
        loginEmail?: string;
        loginPassword?: string;
        registerEmail?: string;
        registerPassword?: string;
        registerPasswordConfirm?: string;
        general?: string;
    }>({});

    const skipAuth = async () => {
        await skipAuthStore();
        router.replace('/(tabs)');
    };

    const closeScreen = async () => {
        await skipAuthStore();
        router.replace('/(tabs)');
    };

    const validateLogin = (): boolean => {
        const newErrors: typeof errors = {};

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if (!loginEmail) {
            newErrors.loginEmail = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (!/^\S+@\S+\.\S+$/.test(loginEmail)) {
            newErrors.loginEmail = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (–ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–û)
        if (!loginPassword) {
            newErrors.loginPassword = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (loginPassword !== 'admin' && loginPassword.length < 6) {
            // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ù–ï "–∞–¥–º–∏–Ω" –ò –µ–≥–æ –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
            newErrors.loginPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
        }
        // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å "–∞–¥–º–∏–Ω", –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const validateRegister = (): boolean => {
        const newErrors: typeof errors = {};

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if (!registerEmail) {
            newErrors.registerEmail = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (!/^\S+@\S+\.\S+$/.test(registerEmail)) {
            newErrors.registerEmail = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        if (!registerPassword) {
            newErrors.registerPassword = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (registerPassword.length < 6) {
            newErrors.registerPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if (!registerPasswordConfirm) {
            newErrors.registerPasswordConfirm = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        } else if (registerPassword !== registerPasswordConfirm) {
            newErrors.registerPasswordConfirm = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleLogin = async () => {
        if (!validateLogin()) {
            return;
        }

        try {
            const response = await axios.post(`https://olx-server.makkenzo.com/users/login`, {
                email: loginEmail,
                password: loginPassword,
            });

            const { token, user } = response.data;
            await setAuthData(token, user);
            setErrors({});
            router.replace('/(tabs)');
        } catch (err: any) { // –õ—É—á—à–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å err
            let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.';
            if (axios.isAxiosError(err) && err.response && err.response.data && err.response.data.message) {
                errorMessage = err.response.data.message;
            }
            setErrors({ general: errorMessage });
            console.error('Login error:', err);
        }
    };

    const handleRegister = async () => {
        if (!validateRegister()) {
            return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ email (—á–∞—Å—Ç—å –¥–æ @)
        const name = registerEmail.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'; // –î–æ–±–∞–≤–∏–ª –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è

        try {
            const response = await axios.post(`https://olx-server.makkenzo.com/users/register`, {
                email: registerEmail,
                password: registerPassword,
                name, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è, –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–∑ email
                // phoneNumber: '', // –ï—Å–ª–∏ —ç—Ç–∏ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –Ω–∞ –±—ç–∫–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                // profilePhoto: '',  // –º–æ–∂–Ω–æ –∏—Ö –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ –±—ç–∫ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            });

            const { token, user } = response.data;
            await setAuthData(token, user);
            setErrors({});
            router.replace('/(tabs)');
        } catch (error: any) { // –õ—É—á—à–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å error
            let errorMessage = '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç.';
            if (axios.isAxiosError(error) && error.response && error.response.data && error.response.data.message) {
                errorMessage = error.response.data.message;
            }
            setErrors({ general: errorMessage });
            console.error('Register error:', error);
        }
    };

    return (
        <View style={styles.container}>
            <TouchableOpacity style={styles.closeButton} onPress={closeScreen}>
                <Text style={styles.closeText}>‚úï</Text>
            </TouchableOpacity>

            <Text style={styles.title}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TVO!</Text>

            <View style={styles.tabContainer}>
                <TouchableOpacity
                    style={[styles.tab, activeTab === 'login' && styles.activeTab]}
                    onPress={() => {
                        setActiveTab('login');
                        setErrors({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–∞
                    }}
                >
                    <Text style={[styles.tabText, activeTab === 'login' && styles.activeTabText]}>–í—Ö–æ–¥</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    style={[styles.tab, activeTab === 'register' && styles.activeTab]}
                    onPress={() => {
                        setActiveTab('register');
                        setErrors({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–∞
                    }}
                >
                    <Text style={[styles.tabText, activeTab === 'register' && styles.activeTabText]}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</Text>
                </TouchableOpacity>
            </View>

            {activeTab === 'login' ? (
                <View style={styles.form}>
                    <TextInput
                        style={[styles.input, errors.loginEmail && styles.inputError]}
                        placeholder="Email"
                        value={loginEmail}
                        onChangeText={setLoginEmail}
                        keyboardType="email-address"
                        autoCapitalize="none"
                        placeholderTextColor={'#999'}
                    />
                    {errors.loginEmail && <Text style={styles.errorText}>{errors.loginEmail}</Text>}
                    <View style={styles.passwordContainer}>
                        <TextInput
                            style={[styles.passwordInput, errors.loginPassword && styles.inputError]}
                            placeholder="–ü–∞—Ä–æ–ª—å"
                            value={loginPassword}
                            onChangeText={setLoginPassword}
                            secureTextEntry={!showLoginPassword}
                            placeholderTextColor={'#999'}
                        />
                        <TouchableOpacity
                            onPress={() => setShowLoginPassword(!showLoginPassword)}
                            style={styles.eyeButton}
                        >
                            <Text>{showLoginPassword ? 'üôà' : 'üëÅÔ∏è'}</Text>
                        </TouchableOpacity>
                    </View>
                    {errors.loginPassword && <Text style={styles.errorText}>{errors.loginPassword}</Text>}
                    {errors.general && <Text style={styles.errorText}>{errors.general}</Text>}
                    <Button title="–í–æ–π—Ç–∏" onPress={handleLogin} />
                </View>
            ) : (
                <View style={styles.form}>
                    <TextInput
                        style={[styles.input, errors.registerEmail && styles.inputError]}
                        placeholder="Email"
                        value={registerEmail}
                        onChangeText={setRegisterEmail}
                        keyboardType="email-address"
                        autoCapitalize="none"
                        placeholderTextColor={'#999'}
                    />
                    {errors.registerEmail && <Text style={styles.errorText}>{errors.registerEmail}</Text>}
                    <View style={styles.passwordContainer}>
                        <TextInput
                            style={[styles.passwordInput, errors.registerPassword && styles.inputError]}
                            placeholder="–ü–∞—Ä–æ–ª—å"
                            value={registerPassword}
                            onChangeText={setRegisterPassword}
                            secureTextEntry={!showRegisterPassword}
                            placeholderTextColor={'#999'}
                        />
                        <TouchableOpacity
                            onPress={() => setShowRegisterPassword(!showRegisterPassword)}
                            style={styles.eyeButton}
                        >
                            <Text>{showRegisterPassword ? 'üôà' : 'üëÅÔ∏è'}</Text>
                        </TouchableOpacity>
                    </View>
                    {errors.registerPassword && <Text style={styles.errorText}>{errors.registerPassword}</Text>}
                    <View style={styles.passwordContainer}>
                        <TextInput
                            style={[styles.passwordInput, errors.registerPasswordConfirm && styles.inputError]}
                            placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                            value={registerPasswordConfirm}
                            onChangeText={setRegisterPasswordConfirm}
                            secureTextEntry={!showRegisterPasswordConfirm}
                            placeholderTextColor={'#999'}
                        />
                        <TouchableOpacity
                            onPress={() => setShowRegisterPasswordConfirm(!showRegisterPasswordConfirm)}
                            style={styles.eyeButton}
                        >
                            <Text>{showRegisterPasswordConfirm ? 'üôà' : 'üëÅÔ∏è'}</Text>
                        </TouchableOpacity>
                    </View>
                    {errors.registerPasswordConfirm && (
                        <Text style={styles.errorText}>{errors.registerPasswordConfirm}</Text>
                    )}
                    {errors.general && <Text style={styles.errorText}>{errors.general}</Text>}
                    <Button title="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" onPress={handleRegister} />
                </View>
            )}

            <TouchableOpacity onPress={skipAuth}>
                <Text style={styles.skipText}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</Text>
            </TouchableOpacity>
        </View>
    );
}